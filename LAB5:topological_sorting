#include <stdio.h>
#include <stdlib.h>

#define MAX 100


int graph[MAX][MAX];
int inDegree[MAX];
int queue[MAX];
int front = 0, rear = 0;


void enqueue(int v) {
    queue[rear++] = v;
}


int dequeue() {
    return queue[front++];
}

int isEmpty() {
    return front == rear;
}

void topologicalSort(int V) {
    int topoOrder[MAX];
    int index = 0;


    for (int i = 0; i < V; i++) {
        if (inDegree[i] == 0)
            enqueue(i);
    }

    while (!isEmpty()) {
        int u = dequeue();
        topoOrder[index++] = u;

   
        for (int v = 0; v < V; v++) {
            if (graph[u][v]) {
                inDegree[v]--;
                if (inDegree[v] == 0)
                    enqueue(v);
            }
        }
    }

    if (index != V) {
        printf("Graph has a cycle. Topological sort not possible.\n");
    } else {
        printf("Topological Order: ");
        for (int i = 0; i < index; i++) {
            printf("%d ", topoOrder[i]);
        }
        printf("\n");
    }
}

int main() {
    int V, E;
    printf("Enter number of vertices: ");
    scanf("%d", &V);

    printf("Enter number of edges: ");
    scanf("%d", &E);

    for (int i = 0; i < V; i++)
        inDegree[i] = 0;

    printf("Enter edges (u v) meaning u -> v:\n");
    for (int i = 0; i < E; i++) {
        int u, v;
        scanf("%d %d", &u, &v);
        graph[u][v] = 1;
        inDegree[v]++;
    }

    topologicalSort(V);

    return 0;
}
